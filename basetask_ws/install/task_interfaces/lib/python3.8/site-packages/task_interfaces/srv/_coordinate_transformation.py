# generated from rosidl_generator_py/resource/_idl.py.em
# with input from task_interfaces:srv/CoordinateTransformation.idl
# generated code does not contain a copyright notice


# Import statements for member types

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_CoordinateTransformation_Request(type):
    """Metaclass of message 'CoordinateTransformation_Request'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('task_interfaces')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'task_interfaces.srv.CoordinateTransformation_Request')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__srv__coordinate_transformation__request
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__srv__coordinate_transformation__request
            cls._CONVERT_TO_PY = module.convert_to_py_msg__srv__coordinate_transformation__request
            cls._TYPE_SUPPORT = module.type_support_msg__srv__coordinate_transformation__request
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__srv__coordinate_transformation__request

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class CoordinateTransformation_Request(metaclass=Metaclass_CoordinateTransformation_Request):
    """Message class 'CoordinateTransformation_Request'."""

    __slots__ = [
        '_x_a',
        '_y_a',
        '_x_offset',
        '_y_offset',
        '_theta',
    ]

    _fields_and_field_types = {
        'x_a': 'double',
        'y_a': 'double',
        'x_offset': 'double',
        'y_offset': 'double',
        'theta': 'double',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.x_a = kwargs.get('x_a', float())
        self.y_a = kwargs.get('y_a', float())
        self.x_offset = kwargs.get('x_offset', float())
        self.y_offset = kwargs.get('y_offset', float())
        self.theta = kwargs.get('theta', float())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.x_a != other.x_a:
            return False
        if self.y_a != other.y_a:
            return False
        if self.x_offset != other.x_offset:
            return False
        if self.y_offset != other.y_offset:
            return False
        if self.theta != other.theta:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def x_a(self):
        """Message field 'x_a'."""
        return self._x_a

    @x_a.setter
    def x_a(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'x_a' field must be of type 'float'"
        self._x_a = value

    @property
    def y_a(self):
        """Message field 'y_a'."""
        return self._y_a

    @y_a.setter
    def y_a(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'y_a' field must be of type 'float'"
        self._y_a = value

    @property
    def x_offset(self):
        """Message field 'x_offset'."""
        return self._x_offset

    @x_offset.setter
    def x_offset(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'x_offset' field must be of type 'float'"
        self._x_offset = value

    @property
    def y_offset(self):
        """Message field 'y_offset'."""
        return self._y_offset

    @y_offset.setter
    def y_offset(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'y_offset' field must be of type 'float'"
        self._y_offset = value

    @property
    def theta(self):
        """Message field 'theta'."""
        return self._theta

    @theta.setter
    def theta(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'theta' field must be of type 'float'"
        self._theta = value


# Import statements for member types

# already imported above
# import rosidl_parser.definition


class Metaclass_CoordinateTransformation_Response(type):
    """Metaclass of message 'CoordinateTransformation_Response'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('task_interfaces')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'task_interfaces.srv.CoordinateTransformation_Response')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__srv__coordinate_transformation__response
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__srv__coordinate_transformation__response
            cls._CONVERT_TO_PY = module.convert_to_py_msg__srv__coordinate_transformation__response
            cls._TYPE_SUPPORT = module.type_support_msg__srv__coordinate_transformation__response
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__srv__coordinate_transformation__response

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class CoordinateTransformation_Response(metaclass=Metaclass_CoordinateTransformation_Response):
    """Message class 'CoordinateTransformation_Response'."""

    __slots__ = [
        '_x_b',
        '_y_b',
    ]

    _fields_and_field_types = {
        'x_b': 'double',
        'y_b': 'double',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.x_b = kwargs.get('x_b', float())
        self.y_b = kwargs.get('y_b', float())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.x_b != other.x_b:
            return False
        if self.y_b != other.y_b:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def x_b(self):
        """Message field 'x_b'."""
        return self._x_b

    @x_b.setter
    def x_b(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'x_b' field must be of type 'float'"
        self._x_b = value

    @property
    def y_b(self):
        """Message field 'y_b'."""
        return self._y_b

    @y_b.setter
    def y_b(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'y_b' field must be of type 'float'"
        self._y_b = value


class Metaclass_CoordinateTransformation(type):
    """Metaclass of service 'CoordinateTransformation'."""

    _TYPE_SUPPORT = None

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('task_interfaces')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'task_interfaces.srv.CoordinateTransformation')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._TYPE_SUPPORT = module.type_support_srv__srv__coordinate_transformation

            from task_interfaces.srv import _coordinate_transformation
            if _coordinate_transformation.Metaclass_CoordinateTransformation_Request._TYPE_SUPPORT is None:
                _coordinate_transformation.Metaclass_CoordinateTransformation_Request.__import_type_support__()
            if _coordinate_transformation.Metaclass_CoordinateTransformation_Response._TYPE_SUPPORT is None:
                _coordinate_transformation.Metaclass_CoordinateTransformation_Response.__import_type_support__()


class CoordinateTransformation(metaclass=Metaclass_CoordinateTransformation):
    from task_interfaces.srv._coordinate_transformation import CoordinateTransformation_Request as Request
    from task_interfaces.srv._coordinate_transformation import CoordinateTransformation_Response as Response

    def __init__(self):
        raise NotImplementedError('Service classes can not be instantiated')
